// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ActorUpdater is an autogenerated mock type for the ActorUpdater type
type ActorUpdater struct {
	mock.Mock
}

// UpdateActorBirthdate provides a mock function with given fields: actorId, birthdate
func (_m *ActorUpdater) UpdateActorBirthdate(actorId int, birthdate string) error {
	ret := _m.Called(actorId, birthdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActorBirthdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(actorId, birthdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActorGender provides a mock function with given fields: actorId, gender
func (_m *ActorUpdater) UpdateActorGender(actorId int, gender string) error {
	ret := _m.Called(actorId, gender)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActorGender")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(actorId, gender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActorName provides a mock function with given fields: actorId, name
func (_m *ActorUpdater) UpdateActorName(actorId int, name string) error {
	ret := _m.Called(actorId, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActorName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(actorId, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActorUpdater creates a new instance of ActorUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorUpdater {
	mock := &ActorUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
