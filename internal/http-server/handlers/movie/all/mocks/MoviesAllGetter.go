// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	postgres "film_library/internal/storage/postgres"

	mock "github.com/stretchr/testify/mock"
)

// MoviesAllGetter is an autogenerated mock type for the MoviesAllGetter type
type MoviesAllGetter struct {
	mock.Mock
}

// GetMovies provides a mock function with given fields: sortBy
func (_m *MoviesAllGetter) GetMovies(sortBy string) ([]postgres.Movie, error) {
	ret := _m.Called(sortBy)

	if len(ret) == 0 {
		panic("no return value specified for GetMovies")
	}

	var r0 []postgres.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]postgres.Movie, error)); ok {
		return rf(sortBy)
	}
	if rf, ok := ret.Get(0).(func(string) []postgres.Movie); ok {
		r0 = rf(sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoviesAllGetter creates a new instance of MoviesAllGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoviesAllGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoviesAllGetter {
	mock := &MoviesAllGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
