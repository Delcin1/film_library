// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MovieUpdater is an autogenerated mock type for the MovieUpdater type
type MovieUpdater struct {
	mock.Mock
}

// UpdateMovieDescription provides a mock function with given fields: movieId, description
func (_m *MovieUpdater) UpdateMovieDescription(movieId int, description string) error {
	ret := _m.Called(movieId, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMovieDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(movieId, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMovieRating provides a mock function with given fields: movieId, rating
func (_m *MovieUpdater) UpdateMovieRating(movieId int, rating int) error {
	ret := _m.Called(movieId, rating)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMovieRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(movieId, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMovieReleaseDate provides a mock function with given fields: movieId, releaseDate
func (_m *MovieUpdater) UpdateMovieReleaseDate(movieId int, releaseDate string) error {
	ret := _m.Called(movieId, releaseDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMovieReleaseDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(movieId, releaseDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMovieTitle provides a mock function with given fields: movieId, title
func (_m *MovieUpdater) UpdateMovieTitle(movieId int, title string) error {
	ret := _m.Called(movieId, title)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMovieTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(movieId, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMovieUpdater creates a new instance of MovieUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieUpdater {
	mock := &MovieUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
