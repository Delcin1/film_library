// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserAuthenticator is an autogenerated mock type for the UserAuthenticator type
type UserAuthenticator struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: username, password
func (_m *UserAuthenticator) GetUser(username string, password string) (int, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserAuthenticator creates a new instance of UserAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAuthenticator {
	mock := &UserAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
